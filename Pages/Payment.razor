@page "/payment"
@inject NavigationManager navigationManager
@inject NavigationManager NavManager
@using System.Text.RegularExpressions

<PageTitle>Payment</PageTitle>
<div class="bg-dark header-image">
<center><img class src="https://burnham-highbridge-tc.gov.uk/wp-content/uploads/2021/06/TVL-Logo-Black.jpg" style="width:600px;height:150px;"></center>
<div class="d-flex flex-row justify-content-around py-3 header-sub-bar">
<NavLink class="nav-link" href="/">
<svg xmlns="http://www.w3.org/2000/svg" width="47" height="47" fill="white" class="bi bi-cash mb-2" viewBox="0 0 16 16"> 
  <path d="M8 10a2 2 0 1 0 0-4 2 2 0 0 0 0 4z"/>
  <path d="M0 4a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V4zm3 0a2 2 0 0 1-2 2v4a2 2 0 0 1 2 2h10a2 2 0 0 1 2-2V6a2 2 0 0 1-2-2H3z"/> </svg>  
<span class="mx-3 fs-3 fw-bold text-white header-link1" aria-hidden="true"> Pay Fine </span>
</NavLink>
<NavLink class="nav-link" href="contact">
                <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="white" class="bi bi-chat-left-text" viewBox="0 0 16 16">
  <path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4.414A2 2 0 0 0 3 11.586l-2 2V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/>
  <path d="M3 3.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM3 6a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9A.5.5 0 0 1 3 6zm0 2.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z"/> </svg>
                <span class="mx-3 fs-3 fw-bold text-white header-link2" aria-hidden="true">Contact Us</span>
            </NavLink>
</div>
</div>
<div class="index-text">
<h1 class="my-5 py-3 fs-1 fw-bold">Payment</h1>
<img src="creditcard2.jpg">
<div class="lh-lg fs-3 my-4 mt-5">Enter your payment details below:   
<EditForm Model="@paymentDetails">

<p class="fw-bold text-danger fs-5">@check</p>
<p class="fw-bold text-danger fs-5">@check2</p>
<p class="fw-bold text-danger fs-5">@check3</p>
<p class="fw-bold text-danger fs-5">@check4</p>
<p class="fw-bold text-danger fs-5">@check5</p>
<p class="fw-bold text-danger fs-5">@check6</p>
<p class="fw-bold text-danger fs-5">@check7</p>

<div class="me-2 my-2"><label for="ccname">Name on card:</label></div>
<input class="w50 input-box" id="ccname" type="text" placeholder="Name on Card" @bind="paymentDetails.cardName" />
<div class="input-text my-2"><label for="ccnumber">Credit Card Number:</label></div>
<input class="w50" id="ccnumber" type="text" placeholder="Card Number" @bind="paymentDetails.cardNumber" />
<div class="input-text my-2"><label for="expirydate">Expiry:</label></div>
<input class="w50" id="expirydate" type="text" placeholder="Expiry Date" @bind="paymentDetails.expDate" />
<div class="my-2"><label for="cvc">CVC</label></div>
<input class="w50" id="cvc" type="text" placeholder="CVC" @bind="paymentDetails.cvc" />
<div class="d-flex-column">
 <button type="button" class="btn btn-danger my-5 ms-5 px-5 py-3 fw-bold border border-dark border border-3" @onclick="SubmitDetails">Pay Now</button>
 </div>
</EditForm>
</div>
</div>


@code
{
  private string? maskedString;
  private string? unmaskedString;
  private string? check;
  private string? check2;
  private string? check3;
  private string? check4;
  private string? check5;
  private string? check6;
  private string? check7;
  private PaymentDetails paymentDetails = new();

  private void SubmitDetails()
  {
    unmaskedString = paymentDetails.cardNumber;

    bool hasPassedName = false;
    bool hasPassedNumber = false;
    bool hasPassedCvc = false;
    bool hasPassedExpiry = false;

    if (paymentDetails.cardName == null || paymentDetails.cvc == null || paymentDetails.cardNumber== null || paymentDetails.expDate == null)
    {
      check = "Error: Please ensure you complete all fields.";
    }
    if (paymentDetails.cardName != null && paymentDetails.cvc != null && paymentDetails.cardNumber != null && paymentDetails.expDate != null) {
      check = string.Empty;
    }
    

  //card name validation
    if (paymentDetails.cardName != null) {
      bool isNameNumber = false;
      Int128 result;
      isNameNumber = Int128.TryParse(paymentDetails.cardName, out result);

    if (isNameNumber == true) {
      check2 = "Error: You have entered an invalid name: names cannot be numbers.";
    } else if (isNameNumber == false){
      hasPassedName = true;
      check2 = string.Empty;
    }
    }
    
    if (paymentDetails.cardNumber != null) {
      bool isCardNumber = false;
      Int128 result;
      isCardNumber = Int128.TryParse(paymentDetails.cardNumber, out result);

      if ((paymentDetails.cardNumber.Trim().Length < 16 || paymentDetails.cardNumber.Trim().Length > 16)) {
        check3 = "Error: Incorrect card number, card number must be 16 digits.";
      
      if (isCardNumber == false) {
        check4 = "Error: Incorrect card number, card number cannot be a word.";
      }
      } if (paymentDetails.cardNumber.Trim().Length == 16) {
        check3 = string.Empty;
      } if (isCardNumber == true){
        check4 = string.Empty;
      } if (paymentDetails.cardNumber.Trim().Length == 16 && isCardNumber == true)
      {
        hasPassedNumber = true;
      }
    }

    if (paymentDetails.cvc != null) {
      bool isCvcNumber = false;
      Int128 result;
      isCvcNumber = Int128.TryParse(paymentDetails.cvc, out result);

      if ((paymentDetails.cvc.Trim().Length < 3 || paymentDetails.cvc.Trim().Length > 3)) {
        check5 = "Error: Incorrect CVC, CVC must be 3 digits.";
      
      if (isCvcNumber == false) {
        check6 = "Error: Incorrect CVC, CVC cannot be a word.";
      }
      } if (paymentDetails.cvc.Trim().Length == 3) {
        check5 = string.Empty;
      } if (isCvcNumber == true){
        check6 = string.Empty;
      } if (paymentDetails.cvc.Trim().Length == 3 && isCvcNumber == true) {
        hasPassedCvc = true;
      }

    } 
    if (paymentDetails.expDate != null) {
      bool isMatch = Regex.IsMatch(paymentDetails.expDate, @"^(0[1-9]|1[0-2])\/([2-9][3-9])$");
      if (isMatch == false) {
        check7 = "Error: Invalid expiry date.";
      } else {
        check7 = string.Empty;
        hasPassedExpiry = true;
      }
    } 

 

    if(hasPassedExpiry == true && hasPassedCvc == true && hasPassedName == true && hasPassedNumber == true)
    {
        if (unmaskedString != null)
        {
          //maskedString = new string('*', 12) + unmaskedString.Substring(12);
          maskedString = unmaskedString.Substring(12,4);
        }
        

        navigationManager.NavigateTo($"/SummaryPayment/{maskedString}");
    }
        
    
   
}
}
  




