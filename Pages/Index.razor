@page "/"

@using System
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Threading
@inject NavigationManager navigationManager
@inject ITodoItemService todoItemService
@inject NavigationManager uriHelper;


<PageTitle>Pay Your TV Licence Fine</PageTitle>


<center><h1 class="display-1 py-5 px-5 bg-black text-light">TV LICENCE FINES</h1></center>
<div class="lh-lg fs-3 my-5">To pay your TV Licence Fine online: <br> You will need your <b>Reference Number</b> from your <u>Fine Notice Letter</u>. <br></div>

<!--<input placeholder="Something todo" @bind="newTodo" />
<button @onclick="AddTodo">Add todo</button>
<br><br>-->
<div class="mb-3 py-3 fs-1 fw-bold">Pay a fine</div>
<div class="fs-2">
<div class="d-flex flex-column align-items-start">
<p class="my-2">Enter your Reference Number:</p>
<input class="form-group mx-sm-3 mb-2 py-2 my-4" type="text" placeholder="Reference Number" @bind="referenceNumber" />


<p class="my-2">Enter your home address:</p>
<input class="form-group mx-sm-3 mb-2 py-2 my-4" type="text" placeholder="Address" @bind="Address" />


<p class="my-2">Enter your postcode:</p>
<input class="form-group mx-sm-3 mb-2 py-2 my-4" type="text" placeholder="Postcode" @bind="Postcode" />

<button type="button" class="btn btn-success my-4 px-5 py-4 mx-3 fw-bold border border-dark border border-3 fs-3" @onclick="CheckRefNum">Check</button>
<p>@checkFail</p>
</div>
</div>

@code {
    private bool isWrong;
    private string? referenceNumber;

    private string? Address;

    private string? checkFail;

    private string? Postcode;
    private List<TodoItem> todoItems = new List<TodoItem>(); 

    private string? newTodo;

    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        /*var itemList = (await todoItemService.GetTodoItems()).ToList();

        if (itemList == null)
        {
            todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

        shouldRender = true;*/
    }

    private async Task CheckRefNum()
    {
    
        var itemList = (await todoItemService.GetTodoItems()).ToList();
        Address = Address.ToLower();
        Postcode = Postcode.ToLower();
        referenceNumber = referenceNumber.ToLower();


        if (itemList == null)
        {
            todoItems.Clear();
        }
        else
        {
            var item = itemList.FirstOrDefault(e => e.LetterReference == referenceNumber && e.Address1 == Address && e.PostCode == Postcode);
            todoItems = itemList;
            if (item != null)
            {
                checkFail = string.Empty;
                navigationManager.NavigateTo($"Summary/{item.Id}");
                
            }
            else 
            {
                checkFail = "Couldn't match your details, please try again.";
            }
        }

        shouldRender = true;


    }
    private async Task AddTodoItem()
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.AddTodoItem(newTodoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }

    private async Task DeleteTodoItem(TodoItem todoItem)
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.DeleteTodoItem(todoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }

    private async Task UpdateTodoItem(TodoItem todoItem)
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.UpdateTodoItem(todoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }
    
}