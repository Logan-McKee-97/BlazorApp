@page "/"

@using System
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Threading
@inject NavigationManager navigationManager
@inject ITodoItemService todoItemService
@inject NavigationManager uriHelper;


<PageTitle>Pay Your TV Licence Fine</PageTitle>

<div class="bg-dark header-image">
<center><img class src="https://burnham-highbridge-tc.gov.uk/wp-content/uploads/2021/06/TVL-Logo-Black.jpg" style="width:600px;height:150px;"></center>
<div class="d-flex flex-row justify-content-around py-3 header-sub-bar">
<NavLink class="nav-link" href="/">
<svg xmlns="http://www.w3.org/2000/svg" width="47" height="47" fill="white" class="bi bi-cash mb-2" viewBox="0 0 16 16"> 
  <path d="M8 10a2 2 0 1 0 0-4 2 2 0 0 0 0 4z"/>
  <path d="M0 4a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V4zm3 0a2 2 0 0 1-2 2v4a2 2 0 0 1 2 2h10a2 2 0 0 1 2-2V6a2 2 0 0 1-2-2H3z"/> </svg>  
<span class="mx-3 fs-3 fw-bold text-white header-link1" aria-hidden="true"> Pay Fine </span>
</NavLink>
<NavLink class="nav-link" href="contact">
                <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="white" class="bi bi-chat-left-text" viewBox="0 0 16 16">
  <path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4.414A2 2 0 0 0 3 11.586l-2 2V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/>
  <path d="M3 3.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM3 6a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9A.5.5 0 0 1 3 6zm0 2.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z"/> </svg>
                <span class="mx-3 fs-3 fw-bold text-white header-link2" aria-hidden="true">Contact Us</span>
            </NavLink>
</div>
</div>

<div class="my-5 py-3 fs-1 fw-bold">Pay a fine</div>
<div class="lh-lg fs-3 my-5">To pay your TV Licence Fine online: <br> You will need your <b>Reference Number</b> from your <u>Fine Notice Letter</u>. <br></div>


<!--<input placeholder="Something todo" @bind="newTodo" />
<button @onclick="AddTodo">Add todo</button>
<br><br>-->

<div class="fs-4">
<div class="d-flex flex-column align-items-start">
<p class="my-2">Enter your Reference Number:</p>
<input class="form-group mx- sm-3 mb-2 py-1 my-2" type="text" placeholder="Reference Number" @bind="referenceNumber" />



<p class="my-2">Enter your Postcode:</p>
<input class="form-group mx- sm-3 mb-2 py-1 my-2" type="text" placeholder="Postcode" @bind="Postcode" />

<button type="button" class="btn btn-success my-4 px-3 fw-bold border border-dark border border-2 fs-4" @onclick="CheckRefNum">Check</button>
<p class="text-danger fw-bold">@checkFail</p>
</div>
</div>

@code {
    private bool isWrong;
    private string? referenceNumber;

    private string? Address;

    private string? checkFail;

    private string? Postcode;
    private List<TodoItem> todoItems = new List<TodoItem>(); 

    private string? newTodo;

    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        /*var itemList = (await todoItemService.GetTodoItems()).ToList();

        if (itemList == null)
        {
            todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

        shouldRender = true;*/
    }

    private async Task CheckRefNum()
    {
    
        var itemList = (await todoItemService.GetTodoItems()).ToList();
        
        if(referenceNumber != null)
        {
            referenceNumber = referenceNumber.ToLower();
        }
        if(Postcode != null)
        {
            Postcode = Postcode.ToLower();
        }
        


        if (itemList == null)
        {
            todoItems.Clear();
        }
        else
        {
            var item = itemList.FirstOrDefault(e => e.LetterReference == referenceNumber && e.PostCode == Postcode);
            todoItems = itemList;
            if (item != null)
            {
                checkFail = string.Empty;
                navigationManager.NavigateTo($"Summary/{item.Id}");
                
            }
            else 
            {
                checkFail = "Couldn't match your details, please try again.";
            }
        }

        shouldRender = true;


    }
    private async Task AddTodoItem()
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.AddTodoItem(newTodoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }

    private async Task DeleteTodoItem(TodoItem todoItem)
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.DeleteTodoItem(todoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }

    private async Task UpdateTodoItem(TodoItem todoItem)
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.UpdateTodoItem(todoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }
    
}