@page "/todo"

@using System.Text.Json
@using System.Text.Json.Serialization
@inject ITodoItemService todoItemService
<center>
<PageTitle>Pay Your TV License Fee</PageTitle>
</center>

<h1 class="display-1 py-5 px-5 bg-black text-light">TV LICENSE FINE</h1>

<!--<input placeholder="Something todo" @bind="newTodo" />
<button @onclick="AddTodo">Add todo</button>
<br><br>-->
<h1 class="mb-3 py-3">Pay a fine</h1>
<input class="form-control form-control-lg my-3" type="text" placeholder="Reference Number" @bind="referenceNumber" />
<button class="btn btn-success btn-lg my-1 py-3" type="button">Search</button>
<p>The reference number you added was: @referenceNumber</p>
<div>
        <table>
@foreach (var todo in todoItems)
    {
           if (todo.LetterReference==referenceNumber)
           {
            <tr><td>Fine payment summary details:</td></tr>
            <tr><td></td></tr>
            <tr>
                <td>Name: @todo.Name</td>
            
            </tr>
        
        <tr><td>
            Address Line: @todo.Address1 , @todo.Town , @todo.PostCode
        </td>
        </tr>
        <tr>
            <td>
            TV Licence Number: @todo.TvLicenceNum
        </td>
        </tr>
        <tr>
            <td>
                <button> Pay Fine</button>
            </td>
        </tr>
           }
           else
           {
            <tr><td></td></tr>
            <tr><td bgcolor="red">No such Letter Reference exists, please confirm you have entered it correctly and try again.</td></tr>
           }
    }
    </table>
</div>


@code {
    
    private string referenceNumber;
    private List<TodoItem> todoItems = new List<TodoItem>();

    private string? newTodo;

    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var itemList = (await todoItemService.GetTodoItems()).ToList();

        if (itemList == null)
        {
            todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

        shouldRender = true;
    }

    private async Task AddTodoItem()
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.AddTodoItem(newTodoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }

    private async Task DeleteTodoItem(TodoItem todoItem)
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.DeleteTodoItem(todoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }

    private async Task UpdateTodoItem(TodoItem todoItem)
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.UpdateTodoItem(todoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }
    
}