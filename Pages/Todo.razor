@page "/todo"

@using System.Text.Json
@using System.Text.Json.Serialization
@inject ITodoItemService todoItemService

<PageTitle>Pay Your TV License Fee</PageTitle>


<center><h1 class="display-1 py-5 px-5 bg-black text-light">TV LICENSE FINE</h1></center>

<!--<input placeholder="Something todo" @bind="newTodo" />
<button @onclick="AddTodo">Add todo</button>
<br><br>-->
<h1 class="mb-3 py-3">Pay a fine</h1>
<input class="form-group mx-sm-3 mb-2" type="text" placeholder="Reference Number" @bind="referenceNumber" />
<button type="button" class="btn btn-success" @onclick="CheckRefNum">Check</button>

<div>
        <table class="table table-bordered">
@foreach (var todo in todoItems)
    {
           if (todo.LetterReference==referenceNumber)
           {
            
        CounterCorrect=CounterCorrect + 1;
        <div class="py-5 my-5">
           <h2>Fine payment summary details:</h2>
          <p>
         <b>Name:</b> @todo.Name <br>
         <b>Address Line:</b> @todo.Address1, @todo.Town, @todo.PostCode <br>
        
        <h3><u>Fine amount:</u> <b>£@todo.FineAmount</b></h3>
        
        </p>
        <button type="button" class="btn btn-danger my-4" onclick="window.location.href ='/Payment'">Pay Now</button>   
        </div>
           }
           else
           {
            CounterWrong++;

            if (CounterCorrect == 0 && CounterWrong <= 1)
            {
                <tr><td></td></tr>
                <tr><td bgcolor="red">No such Letter Reference exists, please confirm you have entered it correctly and try again.</td></tr>
            }
           }
    }
    </table>
</div>


@code {
    private int CounterCorrect = 0;
    private int CounterWrong = 0;
    private string? referenceNumber;
    private List<TodoItem> todoItems = new List<TodoItem>(); 

    private string? newTodo;

    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        /*var itemList = (await todoItemService.GetTodoItems()).ToList();

        if (itemList == null)
        {
            todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

        shouldRender = true;*/
    }

    private async Task CheckRefNum()
    {
        var itemList = (await todoItemService.GetTodoItems()).ToList();

        if (itemList == null)
        {
            todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

        shouldRender = true;


    }
    private async Task AddTodoItem()
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.AddTodoItem(newTodoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }

    private async Task DeleteTodoItem(TodoItem todoItem)
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.DeleteTodoItem(todoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }

    private async Task UpdateTodoItem(TodoItem todoItem)
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.UpdateTodoItem(todoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }
    
}