@page "/todo"

@using System.Text.Json
@using System.Text.Json.Serialization
@inject NavigationManager navigationManager
@inject ITodoItemService todoItemService

<PageTitle>Pay Your TV License Fee</PageTitle>


<center><h1 class="display-1 py-5 px-5 bg-black text-light">TV LICENSE FINE</h1></center>

<!--<input placeholder="Something todo" @bind="newTodo" />
<button @onclick="AddTodo">Add todo</button>
<br><br>-->
<h1 class="mb-3 py-3">Pay a fine</h1>
<input class="form-control form-control-lg my-3" type="text" placeholder="Reference Number" @bind="referenceNumber" />
<input class="form-control form-control-lg my-3" type="text" placeholder="Address" @bind="Address" />
<input class="form-control form-control-lg my-3" type="text" placeholder="Postcode" @bind="Postcode" />
<button @onclick="CheckRefNum">Check Ref</button>
<p>The reference number you added was: @referenceNumber</p>
<p>@checkFail</p>
<div>
        <table>
@foreach (var todo in todoItems)
    {
           if (todo.LetterReference==referenceNumber)
           {
            CounterCorrect=CounterCorrect + 1;
            <tr><td>Fine payment summary details:</td></tr>
            <tr><td></td></tr>
            <tr>
                <td>Name: @todo.Name</td>
            
            </tr>
        
        <tr><td>
            Address Line: @todo.Address1 , @todo.Town , @todo.PostCode
        </td>
        </tr>
        <tr>
            <td>
            TV Licence Number: @todo.TvLicenceNum

        </td>
        </tr>
        <tr>
            <td>
                <button class="btn" onclick="window.location.href = '/counter'">Pay Now</button>
            </td>
        </tr>
           }
           else
           {
            CounterWrong++;

            if (CounterCorrect == 0 && CounterWrong <= 1)
            {
                <tr><td></td></tr>
                <tr><td bgcolor="red">No such Letter Reference exists, please confirm you have entered it correctly and try again.</td></tr>
            }
           }
    }
    </table>
</div>


@code {
    private int CounterCorrect = 0;
    private int CounterWrong = 0;
    private string? referenceNumber;

    private string? Address;

    private string? checkFail;

    private string? Postcode;
    private List<TodoItem> todoItems = new List<TodoItem>(); 

    private string? newTodo;

    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        /*var itemList = (await todoItemService.GetTodoItems()).ToList();

        if (itemList == null)
        {
            todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

        shouldRender = true;*/
    }

    private async Task CheckRefNum()
    {
        var itemList = (await todoItemService.GetTodoItems()).ToList();
      
        if (itemList == null)
        {
            todoItems.Clear();
        }
        else
        {
            var item = itemList.FirstOrDefault(e => e.LetterReference == referenceNumber && e.Address1 == Address && e.PostCode == Postcode);
            todoItems = itemList;
            if (item != null)
            {
                checkFail = string.Empty;
                navigationManager.NavigateTo($"Summary/{item.Id}");
                
            }
            else 
            {
                checkFail = "Couldn't match your details please try again.";
            }
        }

        shouldRender = true;


    }
    private async Task AddTodoItem()
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.AddTodoItem(newTodoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }

    private async Task DeleteTodoItem(TodoItem todoItem)
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.DeleteTodoItem(todoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }

    private async Task UpdateTodoItem(TodoItem todoItem)
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.UpdateTodoItem(todoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }
    
}