@page "/todo"

@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Threading
@inject NavigationManager navigationManager
@inject ITodoItemService todoItemService
@inject NavigationManager uriHelper;


<PageTitle>Pay Your TV License Fee</PageTitle>


<center><h1 class="display-1 py-5 px-5 bg-black text-light">TV LICENSE FINE</h1></center>

<!--<input placeholder="Something todo" @bind="newTodo" />
<button @onclick="AddTodo">Add todo</button>
<br><br>-->
<h1 class="mb-3 py-3">Pay a fine</h1>
<input class="form-group mx-sm-3 mb-2" type="text" placeholder="Reference Number" @bind="referenceNumber" />
<input class="form-group mx-sm-3 mb-2" type="text" placeholder="Address" @bind="Address" />
<input class="form-group mx-sm-3 mb-2" type="text" placeholder="Postcode" @bind="Postcode" />
<button type="button" class="btn btn-success" @onclick="CheckRefNum">Check</button>
<p>The reference number you added was: @referenceNumber</p>
<p>@checkFail</p>

@foreach (var todo in todoItems)
    {
           if (todo.LetterReference==referenceNumber)
           {
        <i><h5 class="my-5">Please see below for confirmation details.</h5></i>
        isWrong = false;
        <div class="py-5 my-1 lh-lg">

         <u><b><h1>Confirm Your Details:</h1></b></u>
         <div class="d-flex flex-row">
        <p class="fs-5">
         <div><b>Name:</b></div> <i>@todo.Name</i><br>
         <div><b>Address Line:</b></div> <i>@todo.Address1, @todo.Town, @todo.PostCode <br></i>
         </p>
         </div>
         
         </div>
        <div class="d-flex flex-row border border-danger border border-4">
        <div><h3 class="py-3 fw-bolder mx-5">Fine amount: <div class="text-danger">£@todo.FineAmount</div></h3></div>
        <button type="button" class="btn btn-danger my-4 ms-5 px-3 py-1 fw-bold border border-dark border border-3><h3 class="py-4 fw-bolder" onclick="window.location.href ='/Payment'">Pay Now</button>
        </div>
    
        
        
        
      
           }
         else
           {    
            isWrong = true;
            }
    } 
    @if (isWrong == true) {
        <alert class="alert-warning"><br> You have entered an incorrect reference number. <br> Please try again.</alert>
    }

@code {
    private bool isWrong;
    private string? referenceNumber;

    private string? Address;

    private string? checkFail;

    private string? Postcode;
    private List<TodoItem> todoItems = new List<TodoItem>(); 

    private string? newTodo;

    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        /*var itemList = (await todoItemService.GetTodoItems()).ToList();

        if (itemList == null)
        {
            todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

        shouldRender = true;*/
    }

    private async Task CheckRefNum()
    {
        var itemList = (await todoItemService.GetTodoItems()).ToList();
      
        if (itemList == null)
        {
            todoItems.Clear();
        }
        else
        {
            var item = itemList.FirstOrDefault(e => e.LetterReference == referenceNumber && e.Address1 == Address && e.PostCode == Postcode);
            todoItems = itemList;
            if (item != null)
            {
                checkFail = string.Empty;
                navigationManager.NavigateTo($"Summary/{item.Id}");
                
            }
            else 
            {
                checkFail = "Couldn't match your details please try again.";
            }
        }

        shouldRender = true;


    }
    private async Task AddTodoItem()
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.AddTodoItem(newTodoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }

    private async Task DeleteTodoItem(TodoItem todoItem)
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.DeleteTodoItem(todoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }

    private async Task UpdateTodoItem(TodoItem todoItem)
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.UpdateTodoItem(todoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }
    
}