@page "/todo"

@using System.Text.Json
@using System.Text.Json.Serialization
@inject ITodoItemService todoItemService

<h3>TV Licence Payment Details</h3>

<!--<input placeholder="Something todo" @bind="newTodo" />
<button @onclick="AddTodo">Add todo</button>
<br><br>-->

<input placeholder="Reference Number" @bind="referenceNumber" />

<div>
        <table>
@foreach (var todo in todoItems)
    {
           if (todo.LetterReference==referenceNumber)
           {
            <tr>
                <td>Name: <input @bind="todo.Name" /></td>
            <!--<input type="checkbox" @bind="todo.IsComplete" />-->
            <!--<button @onclick="( async () => await DeleteTodoItem(todo))"> Delete todo</button>
            <button @onclick="( async () => await UpdateTodoItem(todo))"> Update todo</button>-->
            </tr>
        
        <tr><td>
            Address Line 1: <input @bind="todo.Address1" />
        </td>
        </tr>
        <tr>
        <td>
            Town: <input @bind="todo.Town" />
        </td>
        </tr>
        <tr><td>
            Postcode: <input @bind="todo.PostCode" />
        </td>
        </tr>
        <tr>
            <td>
            TV Licence Number: <input @bind="todo.TvLicenceNum" />
        </td>
        </tr>
        <tr>
            <td>
            Letter Reference: <input @bind="todo.LetterReference" />
        </td>
        </tr>
        <tr>
            <td>
                <button @onclick="( async () => await UpdateTodoItem(todo))"> Update todo</button>
            </td>
        </tr>
           }
           else
           {
            <tr><td bgcolor="red">No such Letter Reference exists, please confirm you have entered it correctly and try again.</td></tr>
           }
    }
    </table>
</div>


@code {
    
    private string referenceNumber;
    private List<TodoItem> todoItems = new List<TodoItem>();

    private string? newTodo;

    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var itemList = (await todoItemService.GetTodoItems()).ToList();

        if (itemList == null)
        {
            todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

        shouldRender = true;
    }
    
    /*private const string webApiUri = "http://localhost:5218/api/todoitems";
    private IEnumerable<TodoItem> todoItems = Array.Empty<TodoItem>();
    private string? newTodo;

    private bool getTodoItemError;
    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,webApiUri);
        request.Headers.Add("Accept", "application/json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            todoItems = await JsonSerializer.DeserializeAsync<IEnumerable<TodoItem>>(responseStream);
        }
        else
        {
            getTodoItemError = true;
        }

        shouldRender = true;
    }*/

    private async Task AddTodoItem()
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.AddTodoItem(newTodoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }

    private async Task DeleteTodoItem(TodoItem todoItem)
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.DeleteTodoItem(todoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }

    private async Task UpdateTodoItem(TodoItem todoItem)
    {
        TodoItem newTodoItem = new TodoItem();
        newTodoItem.Name = newTodo;
        //newTodoItem.IsComplete = false;

        var itemList = (await todoItemService.UpdateTodoItem(todoItem)).ToList();

        if (itemList == null)
        {
            //todoItems.Clear();
        }
        else
        {
            todoItems = itemList;
        }

    }
    
}